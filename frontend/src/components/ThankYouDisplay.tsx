import React, { useState } from 'react'
import { motion } from 'framer-motion'
import { 
  DocumentDuplicateIcon, 
  CheckIcon, 
  InformationCircleIcon,
  CpuChipIcon
} from '@heroicons/react/24/outline'
import toast from 'react-hot-toast'
import { ThankYouResponse } from '../types'

interface ThankYouDisplayProps {
  thankYouData: ThankYouResponse
  onReset: () => void
}

const ThankYouDisplay: React.FC<ThankYouDisplayProps> = ({ thankYouData, onReset }) => {
  const [copied, setCopied] = useState(false)
  const [showMetadata, setShowMetadata] = useState(false)

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(thankYouData.thank_you_note)
      setCopied(true)
      toast.success('Thank you note copied to clipboard!')
      setTimeout(() => setCopied(false), 2000)
    } catch (error) {
      toast.error('Failed to copy to clipboard')
    }
  }

  const formatModelName = (modelString: string) => {
    const [provider, model] = modelString.split(':')
    return {
      provider: provider.charAt(0).toUpperCase() + provider.slice(1),
      model: model || 'Unknown'
    }
  }

  const { provider, model } = formatModelName(thankYouData.ai_model_used)

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.95 }}
      className="wedding-card p-6"
    >
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-2xl font-serif font-semibold text-sage-800">
          Your Thank You Note
        </h2>
        <div className="flex items-center gap-2">
          <button
            onClick={() => setShowMetadata(!showMetadata)}
            className="p-2 text-sage-500 hover:text-sage-700 transition-colors rounded-lg hover:bg-sage-50"
          >
            <InformationCircleIcon className="h-5 w-5" />
          </button>
          <button
            onClick={handleCopy}
            className="wedding-button-secondary flex items-center gap-2 text-sm px-3 py-2"
          >
            {copied ? (
              <>
                <CheckIcon className="h-4 w-4" />
                Copied!
              </>
            ) : (
              <>
                <DocumentDuplicateIcon className="h-4 w-4" />
                Copy
              </>
            )}
          </button>
        </div>
      </div>

      {/* AI Model Badge */}
      <div className="mb-4">
        <div className="inline-flex items-center gap-2 px-3 py-1 bg-gradient-to-r from-wedding-100 to-sage-100 rounded-full text-sm">
          <CpuChipIcon className="h-4 w-4 text-wedding-600" />
          <span className="text-sage-700">
            Generated by <span className="font-medium">{provider} {model}</span>
          </span>
        </div>
      </div>

      {/* Thank You Note Content */}
      <div className="mb-6">
        <div className="bg-gradient-to-br from-white to-sage-50/50 border-2 border-sage-200 rounded-xl p-6 font-serif text-sage-800 leading-relaxed text-lg">
          {thankYouData.thank_you_note.split('\n').map((paragraph, index) => (
            <p key={index} className={index > 0 ? 'mt-4' : ''}>
              {paragraph}
            </p>
          ))}
        </div>
      </div>

      {/* Metadata Panel */}
      {showMetadata && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          exit={{ opacity: 0, height: 0 }}
          className="border-t border-sage-200 pt-4"
        >
          <h3 className="text-sm font-medium text-sage-700 mb-3">AI Generation Details</h3>
          <div className="space-y-2 text-sm text-sage-600">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <span className="font-medium">Provider:</span> {thankYouData.generation_metadata.provider}
              </div>
              <div>
                <span className="font-medium">Strategy:</span> {thankYouData.prompt_strategy}
              </div>
              <div>
                <span className="font-medium">AI Config Key:</span> {thankYouData.generation_metadata.ai_config_key}
              </div>
              <div>
                <span className="font-medium">Temperature:</span> {thankYouData.generation_metadata.model_parameters.temperature || 'N/A'}
              </div>
            </div>
            
            {thankYouData.generation_metadata.prompt_template && (
              <div className="mt-3">
                <span className="font-medium">Prompt Template:</span>
                <div className="mt-1 p-2 bg-sage-50 rounded text-xs font-mono">
                  {thankYouData.generation_metadata.prompt_template}
                </div>
              </div>
            )}
          </div>
        </motion.div>
      )}

      {/* Generate Another Button */}
      <div className="mt-6 pt-4 border-t border-sage-200">
        <motion.button
          onClick={onReset}
          className="wedding-button w-full"
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          Generate Another Thank You Note
        </motion.button>
      </div>
    </motion.div>
  )
}

export default ThankYouDisplay

